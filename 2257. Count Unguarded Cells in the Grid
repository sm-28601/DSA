class Solution {
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>> vis(m, vector<int>(n, 0));
        // mark guard as 1
        for(auto it:guards){
            vis[it[0]][it[1]]= 1;
        }

        // mark wall as -1
        for(auto it:walls){
            vis[it[0]][it[1]]= -1;
        }

        // traverse in vis and mark guarded in all direction
        for (auto it : guards){
            int row = it[0] , col = it[1];
            //North 
            for(int j = row-1 ; j >=0 ; j-- ){
                if(vis[j][col] == -1 || vis[j][col] == 1) 
                    break;
                vis[j][col] = 2;
            }

            //south 
            for(int j = row+1 ; j < m; j++ ){
                if(vis[j][col] == -1 || vis[j][col] == 1) 
                    break;
                vis[j][col] = 2;
            }

            //east
            for(int j = col+1 ; j < n; j++ ){
                if(vis[row][j] == -1 || vis[row][j] == 1) 
                    break;
                vis[row][j] = 2;
            }
            //west
            for(int j = col-1 ; j >=0 ; j-- ){
                if(vis[row][j] == -1 || vis[row][j] == 1) 
                    break;
                vis[row][j] = 2;
            }
        }

        // count unguarded 
        int unguarded = 0;
        for(int i = 0 ; i < m ; i++){
            for(int j  = 0 ; j<n ; j++){
                if(vis[i][j] == 0)
                    unguarded++;
            }
            
        }
        return unguarded;

    }
};
